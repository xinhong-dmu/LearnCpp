#include<iostream>
#include<string>
using namespace std;
class person
{//静态成员变量――static 数据类型 成员变量，放在全局区
	//比之前定义的成员变量（也称实例变量），多一个static
	//静态成员变量在类的所有对象中是共享的，非静态成员变量只属于某个对象
	//静态成员变量一共只有一份，为所有对象共享
public:
	//如果不存在其他初始化语句，在创建第一个对象时，所有的静态数据都会被初始化为0
	//需要在类内声明，在类外需要初始化
	person(int a,int b):pa(a),pb(b)
	{
		number = a + b;
	}
	~person()
	{
	}
	//非静态成员函数，不能通过类名：：非静态成原函数调用
	void fun();
	//静态成员函数
	static void func()
	{//静态成员函数中，不能访问非静态成员变量，也不能调用非静态成员函数
		number = 10;//静态成员函数可以访问静态成员变量
		 //pa;静态成员函数不可以访问非静态成员变量，无法区分到底是哪个对象的非静态成员变量
		cout << number <<  endl;
	}
private:
	int pa;//非静态成员变量，只属于某个对象，所以需要先实例化对象――对象.非静态成员变量；。静态成员变量两种调用都可以
	int pb;//只有非静态成员变量才属于类的对象上
	static int number;//静态成员变量，类内声明
};

//静态成员必须在定义类的文件中对静态变量成员进行初始化
//通过类名::访问静态成员变量
	int person::number= 0;//静态成员变量类外初始化，只有静态成员变量才可以-类名::静态成员  访问

	void test06()
	{//调用静态成员函数
		//方法1：通过对象调用静态成员函数――
		//类名 变量（初值）；变量.静态成员函数（函数变量）
		person p(1,2);
		p.func();
		//方法2：通过类名访问静态成员函数
		//类名：：静态成员函数（函数变量）
		//person::func();
	}

int main()
{
	test06();

	system("pause");
	return 0;
}